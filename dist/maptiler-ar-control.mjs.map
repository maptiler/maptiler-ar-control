{"version":3,"file":"maptiler-ar-control.mjs","sources":["../src/MaptilerARControl.ts"],"sourcesContent":["import { Map, LngLatBounds, LngLat } from \"@maptiler/sdk\";\n\nimport EventEmitter from \"events\";\nimport * as THREE from \"three\";\n// import { ARButton } from 'three/examples/jsm/webxr/ARButton';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { GLTFExporter } from \"three/examples/jsm/exporters/GLTFExporter.js\";\n\ntype CameraSettings = {\n  center: LngLat;\n  zoom: number;\n  pitch: number;\n  bearing: number;\n};\n\ntype MapTextureData = {\n  width: number;\n  height: number;\n  pixelData: Uint8Array;\n  bounds: LngLatBounds;\n};\n\ntype TileIndex2D = {\n  x: number;\n  y: number;\n};\n\nconst MIN_TERRAIN_ZOOM = 12;\nconst TERRAIN_TILE_SIZE = 512;\n\nfunction latLon2Tile(\n  zoom: number,\n  lon: number,\n  lat: number,\n  round = true\n): TileIndex2D {\n  const x = ((lon + 180) / 360) * Math.pow(2, zoom);\n  const y =\n    ((1 -\n      Math.log(\n        Math.tan((lat * Math.PI) / 180) + 1 / Math.cos((lat * Math.PI) / 180)\n      ) /\n        Math.PI) /\n      2) *\n    Math.pow(2, zoom);\n\n  if (round) {\n    return {\n      x: Math.floor(x),\n      y: Math.floor(y),\n    };\n  } else {\n    return {\n      x,\n      y,\n    };\n  }\n}\n\nexport function mapTextureDataToCanvas(mtd: MapTextureData): HTMLCanvasElement {\n  // Create a blank canvas\n  const textureCanvas = document.createElement(\"canvas\");\n  textureCanvas.width = mtd.width;\n  textureCanvas.height = mtd.height;\n  const ctx = textureCanvas.getContext(\"2d\");\n\n  if (!ctx) throw new Error(\"Unable to create a canvas with context.\");\n\n  // Fill the blank canvas with color data from map\n  const canvasImageData = ctx.getImageData(0, 0, mtd.width, mtd.height);\n  canvasImageData.data.set(mtd.pixelData);\n  ctx.putImageData(canvasImageData, 0, 0);\n\n  return textureCanvas;\n}\n\nasync function createMosaic(\n  tileIndexTopLeft: TileIndex2D,\n  tileIndexBottomRight: TileIndex2D,\n  zoom: number,\n  tilesetURLs: Array<string>\n): Promise<HTMLCanvasElement> {\n  const nbTileX = tileIndexBottomRight.x - tileIndexTopLeft.x + 1;\n  const nbTileY = tileIndexBottomRight.y - tileIndexTopLeft.y + 1;\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = nbTileX * TERRAIN_TILE_SIZE;\n  canvas.height = nbTileY * TERRAIN_TILE_SIZE;\n  const context = canvas.getContext(\"2d\");\n\n  if (!context) throw new Error(\"The context is invalid\");\n\n  let shiftX = 0;\n  let shiftY = 0;\n\n  const promises = [];\n\n  for (let j = tileIndexTopLeft.y; j <= tileIndexBottomRight.y; j += 1) {\n    for (let i = tileIndexTopLeft.x; i <= tileIndexBottomRight.x; i += 1) {\n      const imageUrlPattern =\n        tilesetURLs[~~(Math.random() * tilesetURLs.length)];\n      const imageUrl = imageUrlPattern\n        .replace(\"{x}\", i.toString())\n        .replace(\"{y}\", j.toString())\n        .replace(\"{z}\", zoom.toString());\n      promises.push(\n        injectToContext(imageUrl, context, [\n          shiftX * TERRAIN_TILE_SIZE,\n          shiftY * TERRAIN_TILE_SIZE,\n        ])\n      );\n      shiftX++;\n    }\n    shiftX = 0;\n    shiftY++;\n  }\n\n  await Promise.all(promises);\n  return canvas;\n}\n\nfunction injectToContext(\n  imageUrl: string,\n  context: CanvasRenderingContext2D,\n  topLeftPosition: [number, number]\n): Promise<void> {\n  return new Promise((resolve, _) => {\n    const image = new Image();\n    image.crossOrigin = \"anonymous\";\n    image.src = imageUrl;\n    image.onload = function () {\n      context.drawImage(image, topLeftPosition[0], topLeftPosition[1]);\n      resolve();\n    };\n\n    image.onerror = function () {\n      resolve();\n    };\n  });\n}\n\nfunction cropCanvas(\n  cropPosition: number[],\n  cropSize: number[],\n  inputCanvas: HTMLCanvasElement\n): HTMLCanvasElement {\n  const left = cropPosition[0];\n  const top = cropPosition[1];\n  const width = cropSize[0];\n  const height = cropSize[1];\n  const destCanvas = document.createElement(\"canvas\");\n  destCanvas.width = width;\n  destCanvas.height = height;\n  destCanvas.getContext(\"2d\")?.drawImage(\n    inputCanvas,\n    left,\n    top,\n    width,\n    height, // source rect with content to crop\n    0,\n    0,\n    width,\n    height\n  ); // newCanvas, same size as source rect\n  return destCanvas;\n}\n\n/**\n * A promise version of the `Map` \"idle\" event\n * @param map\n * @returns\n */\nfunction idleAsync(map: Map) {\n  return new Promise<boolean>(function (myResolve, myReject) {\n    map.once(\"idle\", () => {\n      myResolve(true);\n    });\n  });\n}\n\nexport class MaptilerARControl extends EventEmitter {\n  private map!: Map;\n  private colorData: MapTextureData | null = null;\n  private landMaskData: MapTextureData | null = null;\n  private terrainData: MapTextureData | null = null;\n  private cameraSettings!: CameraSettings;\n  private hasTerrain!: boolean;\n  private terrainExaggeration!: number;\n  private terrainSourceID!: string;\n  private meterPerPixelCenter = 0;\n  private originalPixelRatio = 0;\n  private mapCaptureBounds!: LngLatBounds;\n\n  private threeScene!: THREE.Scene;\n  private threeCamera!: THREE.PerspectiveCamera;\n  private threeRenderer!: THREE.WebGLRenderer;\n  private threeControler!: THREE.XRTargetRaySpace;\n  private threeOrbitControls!: OrbitControls;\n  private threeTileContainer!: THREE.Object3D;\n  private itemsToDispose: Array<\n    | THREE.CanvasTexture\n    | THREE.DataTexture\n    | THREE.RawShaderMaterial\n    | THREE.PlaneGeometry\n    | THREE.MeshBasicMaterial\n  > = [];\n  private gltfExporter: GLTFExporter = new GLTFExporter();\n\n  constructor(map: Map | null = null) {\n    super();\n    if (map !== null) this.setMap(map);\n  }\n\n  setMap(m: Map) {\n    this.map = m;\n  }\n\n  getMeterPerPixelCenter(): number {\n    return this.meterPerPixelCenter;\n  }\n\n  getColorData(): MapTextureData | null {\n    return this.colorData;\n  }\n\n  getLandMaskData(): MapTextureData | null {\n    return this.landMaskData;\n  }\n\n  getTerrainData(): MapTextureData | null {\n    return this.terrainData;\n  }\n\n  private saveMapSettings() {\n    this.cameraSettings = {\n      center: this.map.getCenter(),\n      zoom: this.map.getZoom(),\n      pitch: this.map.getPitch(),\n      bearing: this.map.getBearing(),\n    };\n\n    this.terrainExaggeration = this.map.getTerrainExaggeration();\n    this.hasTerrain = this.map.hasTerrain();\n    this.originalPixelRatio = this.map.getPixelRatio();\n    if (this.hasTerrain) {\n      this.terrainSourceID = this.map.getTerrain().source;\n    }\n  }\n\n  private restoreMapSettings() {\n    this.map.setPixelRatio(this.originalPixelRatio);\n    this.map.triggerRepaint();\n\n    if (this.hasTerrain) {\n      this.map.setTerrain({\n        source: this.terrainSourceID,\n        exaggeration: this.terrainExaggeration,\n      });\n    }\n\n    this.map.jumpTo(this.cameraSettings);\n  }\n\n  private enableTopView() {\n    this.saveMapSettings();\n\n    if (this.hasTerrain) {\n      // @ts-ignore\n      this.map.setTerrain(null);\n    }\n\n    this.map.setPixelRatio(4);\n    this.map.triggerRepaint();\n\n    const topViewCameraSettings = {\n      center: this.cameraSettings.center,\n      zoom: this.cameraSettings.zoom,\n      pitch: 0,\n      bearing: 0,\n    };\n\n    this.map.jumpTo(topViewCameraSettings);\n  }\n\n  private grabGlData(): MapTextureData {\n    // Gettings the WebGL context from the map's canvas\n    const canvas = this.map.getCanvas();\n    const gl = canvas.getContext(\"webgl\");\n    if (!gl) throw new Error(\"The WebGL context of the map is undefined\");\n\n    // getting the gl drawing buffer\n    const pixels = new Uint8Array(\n      gl.drawingBufferWidth * gl.drawingBufferHeight * 4\n    );\n\n    // Getting the pixel values from the GL buffer\n    gl.readPixels(\n      0,\n      0,\n      gl.drawingBufferWidth,\n      gl.drawingBufferHeight,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      pixels\n    );\n\n    // Saving color data with some metadata\n    return {\n      width: gl.drawingBufferWidth,\n      height: gl.drawingBufferHeight,\n      pixelData: pixels,\n      bounds: this.map.getBounds(),\n    };\n  }\n\n  /**\n   * Compute the color data (pixels values + metadata) for the vieport map\n   */\n  async computeColorData() {\n    this.emit(\"startComputeColorData\");\n    // Wait for the map to be fully loaded on the top view\n    await idleAsync(this.map);\n    this.colorData = this.grabGlData();\n    this.emit(\"endComputeColorData\", {});\n  }\n\n  /**\n   * Compute the color data (pixels values + metadata) for the vieport map\n   */\n  private async computeLandMaskData() {\n    this.emit(\"startComputeLandMaskData\", {});\n\n    this.map.addSource(\"xr_module_global_blackout_source\", {\n      type: \"geojson\",\n      data: {\n        type: \"Feature\",\n        geometry: {\n          type: \"Polygon\",\n          coordinates: [\n            [\n              [-180, -90],\n              [-180, 90],\n              [180, 90],\n              [180, -90],\n              [-180, -90],\n            ],\n          ],\n        },\n      },\n    });\n\n    this.map.addLayer({\n      id: \"xr_module_global_blackout_layer\",\n      type: \"fill\",\n      source: \"xr_module_global_blackout_source\",\n      layout: {},\n      paint: {\n        \"fill-color\": \"#000\",\n        \"fill-opacity\": 1,\n      },\n    });\n\n    this.map.addSource(\"xr_module_land_source\", {\n      type: \"vector\",\n      url: \"https://api.maptiler.com/tiles/land/tiles.json?key=bod4IIn9bwK8mnZIk49v\",\n    });\n\n    this.map.addLayer({\n      id: \"xr_module_land_layer\",\n      type: \"fill\",\n      source: \"xr_module_land_source\",\n      \"source-layer\": \"land\",\n      layout: {},\n      paint: {\n        \"fill-color\": \"#fff\",\n        \"fill-opacity\": 1,\n      },\n    });\n\n    // Wait for the map to be fully loaded on the top view\n    await idleAsync(this.map);\n\n    // Saving color data with some metadata\n    this.landMaskData = this.grabGlData();\n\n    this.map.removeLayer(\"xr_module_global_blackout_layer\");\n    this.map.removeLayer(\"xr_module_land_layer\");\n    this.map.removeSource(\"xr_module_global_blackout_source\");\n    this.map.removeSource(\"xr_module_land_source\");\n\n    await idleAsync(this.map);\n\n    this.emit(\"endComputeLandMaskData\", {});\n  }\n\n  private async computeTerrainData_VIEWPORT() {\n    this.emit(\"startComputeTerrainData\", {});\n\n    this.map.addSource(\"xr_module_terrain_source\", {\n      type: \"raster\",\n      url: \"https://api.maptiler.com/tiles/terrain-rgb-v2/tiles.json\",\n    });\n\n    this.map.addLayer({\n      id: \"xr_module_terrain_layer\",\n      source: \"xr_module_terrain_source\",\n      type: \"raster\",\n      minzoom: 0,\n      layout: {\n        visibility: \"visible\",\n      },\n      paint: {\n        \"raster-opacity\": 1,\n      },\n      filter: [\"all\"],\n    });\n\n    // Wait for the map to be fully loaded on the top view\n    await idleAsync(this.map);\n\n    // Saving color data with some metadata\n    this.terrainData = this.grabGlData();\n\n    this.map.removeLayer(\"xr_module_terrain_layer\");\n    this.map.removeSource(\"xr_module_terrain_source\");\n\n    await idleAsync(this.map);\n\n    this.emit(\"endComputeTerrainData\", {});\n  }\n\n  private async computeTerrainData() {\n    this.emit(\"startComputeTerrainData\", {});\n\n    // For fetching tiles, the zoom level we use must be integer and not above the max zoom level for terrain data\n    const zoom = Math.min(Math.floor(this.map.getZoom()), MIN_TERRAIN_ZOOM);\n    const bounds = this.map.getBounds();\n    const north = bounds.getNorth();\n    const south = bounds.getSouth();\n    const east = bounds.getEast();\n    const west = bounds.getWest();\n\n    const tileIndexTopLeft = latLon2Tile(zoom, west, north, false);\n    const tileIndexTopLeftFloored = {\n      x: Math.floor(tileIndexTopLeft.x),\n      y: Math.floor(tileIndexTopLeft.y),\n    };\n\n    const tileIndexBottomRight = latLon2Tile(zoom, east, south, false);\n    const tileIndexBottomRightFloored = {\n      x: Math.floor(tileIndexBottomRight.x),\n      y: Math.floor(tileIndexBottomRight.y),\n    };\n\n    // The terrainCanvas is rounded up to be aligned with the tile\n    const sdkConfig = this.map.getSdkConfig();\n    const mtsid = this.map.getMaptilerSessionId();\n    const terrainCanvas = await createMosaic(\n      tileIndexTopLeftFloored,\n      tileIndexBottomRightFloored,\n      zoom,\n      [\n        `https://api.maptiler.com/tiles/terrain-rgb/{z}/{x}/{y}.png?key=${sdkConfig.apiKey}&mtsid=${mtsid}&module=xr`,\n      ]\n    );\n\n    // We need to crop the canvas so that it actually fits the actual viewport\n    const offset = [\n      Math.floor(\n        TERRAIN_TILE_SIZE * (tileIndexTopLeft.x - tileIndexTopLeftFloored.x)\n      ), // width\n      Math.floor(\n        TERRAIN_TILE_SIZE * (tileIndexTopLeft.y - tileIndexTopLeftFloored.y)\n      ), // height\n    ];\n\n    const size = [\n      Math.ceil(\n        TERRAIN_TILE_SIZE * (tileIndexBottomRight.x - tileIndexTopLeft.x)\n      ),\n      Math.ceil(\n        TERRAIN_TILE_SIZE * (tileIndexBottomRight.y - tileIndexTopLeft.y)\n      ),\n    ];\n\n    const nbTile = [\n      tileIndexBottomRight.x - tileIndexTopLeft.x,\n      tileIndexBottomRight.y - tileIndexTopLeft.y,\n    ];\n\n    const croppedCanvas = cropCanvas(offset, size, terrainCanvas);\n    const pixels = croppedCanvas\n      .getContext(\"2d\")\n      ?.getImageData(0, 0, croppedCanvas.width, croppedCanvas.height).data;\n\n    if (!pixels) throw new Error(\"Unable to extract terrain data.\");\n\n    this.terrainData = {\n      width: croppedCanvas.width,\n      height: croppedCanvas.height,\n      pixelData: new Uint8Array(pixels.buffer),\n      bounds,\n    };\n\n    this.emit(\"endComputeTerrainData\", {});\n  }\n\n  async compute() {\n    // Set the view from top and axis-aligned\n    this.enableTopView();\n\n    console.time(\"Compute color texture\");\n    await this.computeColorData();\n    console.timeEnd(\"Compute color texture\");\n\n    // console.time(\"Compute water texture\")\n    // await this.computeLandMaskData();\n    // console.timeEnd(\"Compute water texture\")\n\n    console.time(\"Compute terrain texture\");\n    await this.computeTerrainData();\n    console.timeEnd(\"Compute terrain texture\");\n\n    // if (!this.terrainData) return;\n\n    if (!this.colorData) throw new Error(\"The color texture is invalid.\");\n\n    // Compute the resolution in meter per pixel\n    this.mapCaptureBounds = this.map.getBounds();\n    const center = this.mapCaptureBounds.getCenter();\n    const middleWest = new LngLat(this.mapCaptureBounds.getWest(), center.lat);\n    const middleEast = new LngLat(this.mapCaptureBounds.getEast(), center.lat);\n    const distance = middleEast.distanceTo(middleWest);\n    this.meterPerPixelCenter = distance / this.colorData?.width;\n\n    // Set the camera back to normal\n    this.restoreMapSettings();\n\n    // Wait for the map to be fully loaded on the original camera settings\n    await idleAsync(this.map);\n  }\n\n  init3DScene(container: HTMLDivElement | null) {\n    const width = container?.clientWidth || 500;\n    const height = container?.clientHeight || 500;\n\n    this.threeScene = new THREE.Scene();\n    this.threeCamera = new THREE.PerspectiveCamera(\n      50,\n      width / height,\n      0.001,\n      1000\n    );\n    this.threeCamera.position.set(0, 10, 10);\n\n    this.threeRenderer = new THREE.WebGLRenderer({ antialias: true });\n    this.threeRenderer.setClearColor(0xffffff, 0);\n    this.threeRenderer.setPixelRatio(window.devicePixelRatio);\n    this.threeRenderer.setSize(width, height);\n    // this.threeRenderer.xr.enabled = true\n    // this.threeControler = this.threeRenderer.xr.getController( 0 );\n\n    if (container) {\n      container.appendChild(this.threeRenderer.domElement);\n      // container.appendChild( ARButton.createButton( this.threeRenderer ) )\n    }\n\n    this.threeOrbitControls = new OrbitControls(\n      this.threeCamera,\n      this.threeRenderer.domElement\n    );\n    // this.itemsToDispose.push(this.threeOrbitControls);\n\n    this.threeTileContainer = new THREE.Object3D();\n    this.threeScene.add(this.threeTileContainer);\n\n    // the scale must really be much smaller than the original object,\n    // maybe it's in meters...\n    this.threeTileContainer.rotateX(-Math.PI / 2);\n\n    // const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    // const material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );\n    // const cube = new THREE.Mesh( geometry, material );\n    // this.threeScene.add( cube );\n\n    // const dl = new THREE.DirectionalLight(0xffffff, 1);\n    // dl.position.set(10, 10, 10);\n    // this.threeScene.add(dl);\n\n    // const light = new THREE.AmbientLight( 0xffffff ); // soft white light\n    // this.threeScene.add( light );\n\n    // this.animate();\n  }\n\n  buildMapModel() {\n    // remove a potentially existing map mesh from a previous run\n    this.threeTileContainer.clear();\n\n    // Delete all GPU buffers from a previous run\n    this.dispose();\n\n    const modelData = this.createMapMesh();\n\n    const meshWidth = 10;\n    const ratio = (meshWidth * 1) / modelData.widthMeter;\n    this.threeTileContainer.scale.x = ratio;\n    this.threeTileContainer.scale.y = ratio;\n    this.threeTileContainer.scale.z = ratio;\n    this.threeTileContainer.add(modelData.model);\n\n    console.log(\"DONE\");\n  }\n\n  render3D = () => {\n    this.threeOrbitControls.update();\n    this.threeRenderer.render(this.threeScene, this.threeCamera);\n  };\n\n  animate = () => {\n    this.threeRenderer.setAnimationLoop(this.render3D);\n  };\n\n  private createMapMesh(): {\n    model: THREE.Object3D;\n    widthMeter: number;\n    heightMeter: number;\n  } {\n    if (!this.colorData) throw new Error(\"Color textures is not ready.\");\n    if (!this.terrainData) throw new Error(\"Terrain textures is not ready.\");\n\n    // const mapTexture = new THREE.DataTexture(this.colorData.pixelData, this.colorData.width, this.colorData.height);\n\n    console.time(\"making canvas\");\n    const colorCanvas = mapTextureDataToCanvas(this.colorData);\n    console.timeEnd(\"making canvas\");\n\n    console.log('oioioi');\n    \n\n    console.time(\"tracing borders\");\n    const ctx = colorCanvas.getContext(\"2d\");\n\n    if (!ctx) throw new Error(\"Color texture not available\");\n\n    // Use a base color and darken it to use on the north/south side\n    const baseColor = new THREE.Color(\"#7b8487\");\n    // const darkerColor = baseColor.clone().offsetHSL(0, 0, -0.2);\n    const darkerColor = baseColor.clone().multiplyScalar(0.65);\n\n    ctx.fillStyle = `#${baseColor.getHexString()}`;\n    const thickness =\n      Math.ceil(this.colorData.width / this.terrainData.width) * 1.5;\n\n    // upper band\n    ctx.fillRect(0, 0, colorCanvas.width - 1, thickness);\n\n    // bottom\n    ctx.fillRect(\n      0,\n      colorCanvas.height - 1 - thickness,\n      colorCanvas.width - 1,\n      colorCanvas.height - 1\n    );\n\n    ctx.fillStyle = `#${darkerColor.getHexString()}`;\n\n    // left band\n    ctx.fillRect(0, 0, thickness, colorCanvas.height - 1);\n\n    // right\n    ctx.fillRect(\n      colorCanvas.width - 1 - thickness,\n      0,\n      colorCanvas.width - 1,\n      colorCanvas.height - 1\n    );\n\n    console.timeEnd(\"tracing borders\");\n\n    const mapTexture = new THREE.CanvasTexture(colorCanvas);\n    mapTexture.flipY = false;\n\n    // @ts-ignore\n    mapTexture.colorSpace = THREE.SRGBColorSpace; // for some reason, the TS types do not mention this\n    mapTexture.needsUpdate = true;\n\n    this.itemsToDispose.push(mapTexture);\n    // this.itemsToDispose.push(terrainTexture);\n\n    const material = new THREE.MeshBasicMaterial({\n      side: THREE.DoubleSide,\n      map: mapTexture,\n    });\n\n    const bounds = this.mapCaptureBounds;\n    const widthMeter = bounds.getSouthEast().distanceTo(bounds.getSouthWest());\n    const heightMeter = bounds.getSouthEast().distanceTo(bounds.getNorthEast());\n\n    // creating the mountain mesh and adding it to the scene\n    const mapGeom = new THREE.PlaneGeometry(\n      widthMeter,\n      heightMeter,\n      this.terrainData.width - 1,\n      this.terrainData.height - 1\n    );\n    const mapMesh = new THREE.Mesh(mapGeom, material);\n\n    // const elevation = terrain8BitData.pixelData;\n    const positionBuf = mapGeom.attributes.position.array;\n\n    console.time(\"Applying elevation\");\n    const w = this.terrainData.width;\n    const h = this.terrainData.height;\n\n    for (let i = 0; i < positionBuf.length / 3; i += 1) {\n      const r = this.terrainData.pixelData[i * 4];\n      const g = this.terrainData.pixelData[i * 4 + 1];\n      const b = this.terrainData.pixelData[i * 4 + 2];\n      let elevation = -10000 + (r * 256 * 256 + g * 256 + b) * 0.1;\n\n      const xInput = i % w;\n      const yInput = ~~(i / w);\n\n      if (\n        xInput === 0 ||\n        yInput === 0 ||\n        xInput === w - 1 ||\n        yInput === h - 1\n      ) {\n        elevation = 0;\n      }\n\n      // @ts-ignore\n      positionBuf[i * 3 + 2] = elevation;\n    }\n\n    console.timeEnd(\"Applying elevation\");\n\n    this.itemsToDispose.push(mapGeom);\n\n    const bottomPlaneGeom = new THREE.PlaneGeometry(\n      widthMeter,\n      heightMeter,\n      1,\n      1\n    );\n    const bottomPlaneMat = new THREE.MeshBasicMaterial({\n      side: THREE.BackSide,\n      color: 0x1f1512,\n    });\n    const bottomPlaneMesh = new THREE.Mesh(bottomPlaneGeom, bottomPlaneMat);\n\n    this.itemsToDispose.push(bottomPlaneGeom);\n    this.itemsToDispose.push(bottomPlaneMat);\n\n    const model = new THREE.Object3D();\n    model.add(mapMesh);\n    model.add(bottomPlaneMesh);\n\n    return {\n      model,\n      widthMeter,\n      heightMeter,\n    };\n  }\n\n  dispose() {\n    while (this.itemsToDispose.length) {\n      const itemToDispose = this.itemsToDispose.pop();\n      itemToDispose?.dispose();\n    }\n  }\n\n  export(binary = false) {\n    this.gltfExporter.parse(\n      this.threeScene,\n\n      // success\n      (gltfPayload) => {\n        console.log(gltfPayload);\n\n        let gltfBlob: Blob;\n\n        if (binary) {\n          gltfBlob = new Blob([gltfPayload as ArrayBuffer], {\n            type: \"application/octet-stream\",\n          });\n        } else {\n          const gltfJson = JSON.stringify(gltfPayload, null, 2);\n          gltfBlob = new Blob([gltfJson], { type: \"text/plain\" });\n        }\n\n        const link = document.createElement(\"a\");\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.href = URL.createObjectURL(gltfBlob);\n        link.download = `maptiler_scene.${binary ? \"glb\" : \"gltf\"}`;\n        link.click();\n      },\n\n      // error\n      (err) => {\n        console.log(\"error:\", err);\n      },\n\n      // options\n      {\n        binary: binary,\n        maxTextureSize: 8192,\n      }\n    );\n  }\n}\n"],"names":[],"mappings":"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"}